const PUMPNUM = 5
const INTERVAL = 5
const T = INTERVAL + 1
const ON = 2
const OFF = 0
const KEEP = 1
const TRUE = 1
const FALSE = 0

range BROKEN = FALSE..TRUE
range PUMPORDER = OFF..ON 

const N1 = 30
const N2 = 70
const M1 = 10
const M2 = 90

const BEST1 = 40
const BEST2 = 60

const C = 100
const W = 5
const DOWN = 2
const UP = 2

const MID = (N1+N2)/2
const FTR  = 3 
const VMINOUT = 1
const PUMPONE=3
const PN = 3
const PQ = 2
const PUMPQ = PN*PQ


range Q = 0..C
range P = 0..PUMPQ
range V = 0..W


//Manual Control
MANUALCONTROL = (start -> MANUALCONTROL | stop -> MANUALCONTROL | rescue -> MANUALCONTROL | repaired -> MANUALCONTROL).

//Timer Process
TIMER = (start -> TIME),
	TIME = (tick -> TIME | stop -> TIMER).

//BOILER Model  
STEAMBOILER = (start->STEAMBOILERUN[60][0][0]),
	STEAMBOILERUN[q:Q][v:V][p:P] = (stop -> STEAMBOILER 
		  | getWaterQuantity[q] -> getSteamRate[v] -> getPumpRate[p] -> STEAMBOILERUN[q][v][p] 
		  | pumpOn -> tick -> tick -> tick -> tick -> tick -> STEAMBOILERUN[q][v][p+PQ] 
          | pumpOff -> STEAMBOILERUN[q][v][p-PQ]
		  | keep -> STEAMBOILERUN[q][v][p]

          | tick -> boiling[q][v][p] ->
 	      (  when (q >= M2 )
    	     boilingAboveM2[q][v][p] -> STEAMBOILERUN[q+(p-v)][VMINOUT][p]

          | when (N2 <= q && q < M2)
    	     boilingN2toM2[q][v][p] -> STEAMBOILERUN[q+(p-v)][VMINOUT][p]

 	      | when (BEST2 < q && q < N2 && (p-v) < 0 && (v+UP) < W)
    	     boilingBEST2toN2[q][v][p] -> STEAMBOILERUN[q+(p-v)][v+UP][p]

 	      | when (BEST2 < q && q < N2 && (p-v) < 0 && (v+UP) >= W)
    	     boilingBEST2toN2[q][v][p] -> STEAMBOILERUN[q+(p-v)][v][p]

          | when (BEST2 < q && q < N2 && (p-v) >= 0)
    	     boilingBEST2toN2[q][v][p] -> STEAMBOILERUN[q+(p-v)][v-DOWN][p]

 		  | when (BEST1 <= q && q <= BEST2)
    	     boilingBEST1toBEST2[q][v][p] -> STEAMBOILERUN[q+(p-v)][W][p]

          | when (N1 <= q && q < BEST1 && (p-v) < 0)
    	     boilingN1toBEST1[q][v][p] -> STEAMBOILERUN[q+(p-v)][v-DOWN][p]

          | when (N1 <= q && q < BEST1 && (p-v) >= 0 && (v+UP) < W)
    	     boilingN1toBEST1[q][v][p] -> STEAMBOILERUN[q+(p-v)][v+UP][p]

          | when (N1 <= q && q < BEST1 && (p-v) >= 0 && (v+UP) >= W)
    	     boilingN1toBEST1[q][v][p] -> STEAMBOILERUN[q+(p-v)][v][p]

          | when (M1 <= q && q < N1)
    	     boilingM1toN1[q][v][p] -> STEAMBOILERUN[q+(p-v)][VMINOUT][p]

          | when (q < M1)
    	     boilingLM1[q][v][p] -> STEAMBOILERUN[q+(p-v)][0][p]
          )).


//Sensors
//WATERSENSOR = (start -> WATERSENSORRUN),
//	WATERSENSORRUN = (stop -> WATERSENSOR | rescue -> WATERSENSORRESCUE | tick -> tick -> tick -> tick -> tick -> getWaterQuantity[q:Q] -> waterchan.send[q] -> WATERSENSORRUN),
//	WATERSENSORRESCUE = (repaired -> WATERSENSORRUN | tick -> WATERSENSORRESCUE).

WATERSENSOR = (start -> WATERSENSORRUN),
	WATERSENSORRUN = (stop -> WATERSENSOR | tick -> tick -> tick -> tick -> tick -> getWaterQuantity[q:Q] -> waterchan.send[q] -> WATERSENSORRUN).

STEAMSENSOR = (start -> STEAMSENSORRUN),
	STEAMSENSORRUN = (stop -> STEAMSENSOR | tick -> tick -> tick -> tick -> tick -> getSteamRate[v:V] -> steamchan.send[v] -> STEAMSENSORRUN).

PUMPSENSOR = (start -> PUMPSENSORRUN),
	PUMPSENSORRUN = (stop -> PUMPSENSOR | tick -> tick -> tick -> tick -> tick -> getPumpRate[p:P] -> pumpsensorchan.send[p] -> PUMPSENSORRUN).

//Pump Controler
PUMPCONTROLER = (start -> PUMPCONTROLERUN),
	PUMPCONTROLERUN = (stop -> PUMPCONTROLER | pumpcontrollerchan.receive[o:PUMPORDER] -> (when (o == ON) tick -> tick -> tick -> tick -> pumpOn -> PUMPCONTROLERUN | when (o == OFF) pumpOff -> PUMPCONTROLERUN | when (o == KEEP) keep -> PUMPCONTROLERUN)).
 
//Control System - need modified to multi pump on/off 
CONTROLSYSTEM = (start -> SYSCONTROLRUN[0]),

	SYSCONTROLRUN[lastq:Q] = (stop -> CONTROLSYSTEM | rescue ->  SYSCONTROLRESCUE[lastq] | waterchan.receive[q:Q] -> steamchan.receive[v:V] -> pumpsensorchan.receive[p:P]  -> makedecision ->

           (when (q > BEST2-FTR && (p-v) > 0 && p > 0) 
				makedecisionoff -> pumpcontrollerchan.send[OFF] -> SYSCONTROLRUN[q] | 

            when (q > BEST2-FTR && v > 0 && p == 0) 
				nodecisionresult -> pumpcontrollerchan.send[KEEP] -> SYSCONTROLRUN[q] |

	        when (BEST1+FTR <= q && q <= BEST2-FTR) 
				nodecisionresult -> pumpcontrollerchan.send[KEEP] -> SYSCONTROLRUN[q] |

         	when (q < BEST1+FTR && (p-v) < 0 && p < PUMPQ)  
				makedecisionon -> pumpcontrollerchan.send[ON] -> SYSCONTROLRUN[q] 
		   )),

    SYSCONTROLRESCUE[lastq:Q] = ( repaired -> SYSCONTROLRUN[lastq] | waterchan.receive[q:Q] -> steamchan.receive[v:V] -> pumpsensorchan.receive[p:P] -> makerescuedecision -> 
				
 			(when (lastq+(p-v)*5 >= M1 && lastq+(p-v)*5 <= M2 && v == p)
      			nodecisionresult -> pumpcontrollerchan.send[KEEP] -> SYSCONTROLRESCUE[lastq+(p-v)*5+(p-v)] |

             when (lastq+(p-v)*5 > BEST2-FTR && (p-v) > 0 && p > 0) 
				makedecisionoff -> pumpcontrollerchan.send[OFF] -> SYSCONTROLRESCUE[lastq+(p-v)*5+(p-v)] | 

	         when (BEST1+FTR <= (lastq+(p-v)*5) && (lastq+(p-v)*5) <= BEST2-FTR) 
				nodecisionresult -> pumpcontrollerchan.send[KEEP] -> SYSCONTROLRESCUE[lastq+(p-v)*5+(p-v)] |

         	 when (lastq+(p-v)*5 < BEST1+FTR && (p-v) < 0 && p < PUMPQ)  
				makedecisionon -> pumpcontrollerchan.send[ON] -> SYSCONTROLRESCUE[lastq+(p-v)*5+(p-v)] 
             )).



//Composite System
||ALLSYSTEM = (TIMER || STEAMBOILER || CONTROLSYSTEM || PUMPCONTROLER || WATERSENSOR || STEAMSENSOR || PUMPSENSOR || MANUALCONTROL)
         /{waterchan/waterchan.{send,receive}, pumpsensorchan/pumpsensorchan.{send,receive}, steamchan/steamchan.{send,receive}, pumpcontrollerchan/pumpcontrollerchan.{send,receive}}.
	//		<<{start, getWaterQuantity, makedecision, makedecisionoff, makedecisionon, nodecisionresult, pumpcontrollerchan, pumpsensorchan, waterchan[q:Q], steamchan, pumpOn, pumpOff, keep}.
||BASICSYSTEM = (ALLSYSTEM || BASIC).
||NORMALSYSTEM = (ALLSYSTEM ||NORMAL).
||OPTIMIZATIONSYSTEM = (ALLSYSTEM || OPTIMIZATION).

//Progress
progress STEAMBOILERWorking = {boiling[q:Q][v:V][p:P], start, stop}
progress CSWorking = {makedecision, start, stop}
progress WaterSensorWorking = {getWaterQuantity[q:Q], start, stop}
progress SteamSensorWorking = {getSteamRate[v:V], start, stop}
progress PumpSensorWorking = {getPumpRate[v:V], start, stop}
progress PumpControllerWorking = {pumpOn, pumpOff, keep, start, stop}


//Proerties

property OPTIMIZATION = (getWaterQuantity[q:BEST1..BEST2] -> OPTIMIZATION) + {getWaterQuantity[0..BEST1-1], getWaterQuantity[BEST2+1..C]}.
property BASIC = (getWaterQuantity[q:M1..M2] -> BASIC) + {getWaterQuantity[0..M1-1], getWaterQuantity[M2+1..C]}.
property NORMAL = (getWaterQuantity[q:N1..N2] -> NORMAL) + {getWaterQuantity[0..N1-1], getWaterQuantity[N2+1..C]}.






